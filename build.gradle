plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.0.4.RELEASE'
  id 'org.springframework.boot' version '1.5.10.RELEASE'
  id 'org.owasp.dependencycheck' version '3.1.0'
  id 'com.github.ben-manes.versions' version '0.17.0'
  id 'org.sonarqube' version '2.5'
  id 'net.ltgt.apt' version '0.13'
}

group = 'uk.gov.hmcts.reform'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

checkstyle {
  maxWarnings = 0
  toolVersion = '8.7'
  configDir = new File(rootDir, 'config/checkstyle')
}

// https://github.com/gradle/gradle/pull/3901 - at the time it is planed for Gradle 4.7RC1
// make build fail on Checkstyle issues (https://github.com/gradle/gradle/issues/881)
tasks.withType(Checkstyle).each { checkstyleTask ->
  checkstyleTask.doLast {
    reports.all { report ->
      def outputFile = report.destination
      if (outputFile.exists() && outputFile.text.contains("<error ")) {
        throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
      }
    }
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'dependency-check-suppressions.xml'
}

mainClassName = 'uk.gov.hmcts.reform.finrem.FinancialRemedyApplication'

repositories {
  jcenter()
  maven {
    url  "https://dl.bintray.com/hmcts/hmcts-maven"
  }
}

sourceSets {
  test {
    java.srcDir 'src/test/java'
  }
  functional {
    java.srcDir 'src/test/functional/java'
    resources.srcDir 'src/test/resources'
    compileClasspath += main.output + test.output
    runtimeClasspath += main.output + test.output
  }
}

configurations {
  functionalCompile.extendsFrom testCompile
  functionalRuntime.extendsFrom testRuntime
}

pmd {
  toolVersion = "5.8.1"
  ignoreFailures = true
  sourceSets = [sourceSets.main, sourceSets.test]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

jacocoTestReport {
  executionData(test)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

def springBootVersion = plugins.getPlugin('org.springframework.boot').class.package.implementationVersion
def springfoxSwagger = '2.7.0'
def javaLoggingVersion = '1.6.1'

def versions = [
  springfoxSwagger: '2.7.0',
  javaLoggingVersion: '1.6.1'
]

bootRun {
  systemProperty 'server.port', '8085'
}

dependencies {
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: springBootVersion
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: springBootVersion
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: springBootVersion

  compile group: 'io.springfox', name: 'springfox-swagger2', version: springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: springfoxSwagger

  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-spring', version: javaLoggingVersion
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-httpcomponents', version: javaLoggingVersion
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: javaLoggingVersion
  compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: '1.1.0'

  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix', version: '1.4.0.RELEASE'
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-hystrix-dashboard', version: '1.4.0.RELEASE'

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: springBootVersion
  testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.6'
}

jar {
  archiveName 'fr-backend.jar'
  manifest {
    attributes 'Implementation-Title': project.name,
      'Implementation-Version': project.version
  }
}

task smoke(type: Test, description: 'Runs the smoke tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functional.output.classesDirs
  classpath = sourceSets.functional.runtimeClasspath

  useJUnit {
    includeCategories 'uk.gov.hmcts.reform.finrem.functional.SmokeTest'
  }
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
  testClassesDirs = sourceSets.functional.output.classesDirs
  classpath = sourceSets.functional.runtimeClasspath
}

sonarqube {
  properties {
    property "sonar.projectName", "Financial Remedy"
    property "sonar.projectKey", "FINREM"
    property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
    property "sonar.jacoco.itReportPath", "${project.buildDir}/jacoco/functional.exec"
    property "sonar.exclusions", "**/finrem/models/**, **/finrem/FinancialRemedyApplication.java"
  }
}

